import { Mic, ImageIcon, Link2, X, Loader2 } from "lucide-react"
import { Button, Avatar, Tooltip, message, Input } from "antd"
import { useState, useEffect, useRef } from "react"
import type React from "react"
import { RootState, useAppDispatch, useAppSelector } from "../../redux/store/rootStore"
import useLayoutStatus from "../../Hooks/useLayoutStatus"
import { NoteComposerProps } from "./NoteComposer.types"
import { createNewNote } from "../../redux/api/noteAPI"
import { resetfilteredNotesState } from "../../redux/slices/NoteSlice/noteSlice"

export default function NoteComposer({ onSave }: NoteComposerProps) {
  const [url, setUrl] = useState("")
  const [urlError, setUrlError] = useState("")
  const [noteContent, setNoteContent] = useState("")
  const [recordingTime, setRecordingTime] = useState(0)
  const [image, setImage] = useState<File | null>(null)
  const [isRecording, setIsRecording] = useState(false)
  const [showUrlInput, setShowUrlInput] = useState(false)
  const [isTranscribing, setIsTranscribing] = useState(false)

  const timerRef = useRef<number | undefined>(undefined)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const recognitionRef = useRef<any>(null)
  const authUser = useAppSelector((state: RootState) => state.auth)
  const { current } = useLayoutStatus()
  const dispatch = useAppDispatch()
  const { isLoading } = useAppSelector((state) => state.notes)

  // Initialize speech recognition
  useEffect(() => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new (window as any).webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;

      recognition.onresult = (event: any) => {
        let currentTranscript = '';
        for (let i = 0; i < event.results.length; i++) {
          currentTranscript += event.results[i][0].transcript;
        }
        setNoteContent(prevContent => prevContent + ' ' + currentTranscript);
      };

      recognition.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        message.error('Speech recognition error. Please try again.');
        stopRecording();
      };

      recognition.onend = () => {
        if (isRecording) {
          recognition.start();
        }
      };

      recognitionRef.current = recognition;
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, []);

  useEffect(() => {
    if (isRecording) {
      timerRef.current = window.setInterval(() => {
        setRecordingTime((prev) => prev + 1)
      }, 1000)
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current)
      }
    }
  }, [isRecording])

  const validateUrl = (url: string): boolean => {
    if (!url.trim()) return true
    return url.trim().startsWith('https://') || url.trim().startsWith('http://')
  }

  const startRecording = async () => {
    try {
      setIsTranscribing(true);
      await navigator.mediaDevices.getUserMedia({ audio: true });
      recognitionRef.current.start();
      setIsRecording(true);
      setRecordingTime(0);
      message.success('Voice recording started');
    } catch (error) {
      message.error("Failed to start recording. Please check your microphone permissions.")
      console.error(error)
    }
  }

  const stopRecording = () => {
    if (recognitionRef.current && isRecording) {
      recognitionRef.current.stop();
      setIsRecording(false);
      setIsTranscribing(false);
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      message.success('Voice recording completed');
    }
  }

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      if (file.type.startsWith("image/")) {
        setImage(file)
        message.success("Image attached successfully")
      } else {
        message.error("Please select an image file")
      }
    }
  }

  const handleSave = () => {
    if (noteContent.trim() || url.trim() || image) {
      if (!validateUrl(url)) {
        setUrlError("Please enter a valid URL starting with http:// or https://")
        return
      }

      const noteData = {
        content: noteContent.trim(),
        ...(url.trim() && { link: url.trim() }),
      }

      dispatch(resetfilteredNotesState())
      dispatch(createNewNote(noteData))
        .then((noteData) => {
          setNoteContent('')
          setUrl('')
          setUrlError('')
          setImage(null)
          setShowUrlInput(false)
          message.success(noteData.payload.message)
        })
        .catch((error) => {
          message.error(error?.message || 'Failed to save note')
        })
    } else {
      message.warning('Please add some content before saving')
    }
  }

  const handleClearUrl = () => {
    setUrl("")
    setUrlError("")
    setShowUrlInput(false)
  }

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newUrl = e.target.value
    setUrl(newUrl)
    if (newUrl && !validateUrl(newUrl)) {
      setUrlError("Please enter a valid URL starting with http:// or https://")
    } else {
      setUrlError("")
    }
  }

  const handleClearImage = () => {
    setImage(null)
  }

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-gradient-to-t from-white to-white/80 backdrop-blur-sm">
      <div className={`
        mx-auto transition-all duration-300 p-4
        ${(current === "sm" || current === "xs") ? "w-full" : "max-w-3xl"}
      `}>
        <div className={`
          bg-white rounded-lg shadow-lg border border-gray-100
          hover:border-blue-100 hover:shadow-xl transition-all duration-300
          overflow-hidden
        `}>
          {/* Recording Overlay */}
          {isRecording && (
            <div className="absolute top-[-33%] inset-0 bg-black/5 backdrop-blur-sm rounded-lg flex items-center justify-center z-50">
              <div className="flex flex-col items-center gap-6">
                <div className="relative">
                  <div className="w-32 h-32 rounded-full bg-gradient-to-r from-blue-500/10 to-purple-500/10 flex items-center justify-center animate-pulse">
                    <div className="w-24 h-24 rounded-full bg-gradient-to-r from-blue-500/20 to-purple-500/20 flex items-center justify-center animate-pulse delay-75">
                      <div className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-500/30 to-purple-500/30 flex items-center justify-center animate-pulse delay-150">
                        <Mic className="w-8 h-8 text-red-500 animate-bounce" />
                      </div>
                    </div>
                  </div>
                  <div className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-sm font-medium bg-white/90 px-4 py-1 rounded-full shadow-sm">
                    Recording... {recordingTime}s
                  </div>
                </div>
                <Button 
                  type="primary" 
                  danger
                  onClick={stopRecording}
                  className="mt-8"
                  icon={<X size={16} className="mr-1" />}
                >
                  Stop Recording
                </Button>
              </div>
            </div>
          )}

          <div className="p-4 space-y-4">
            {/* Main Input Area */}
            <div className="flex items-start gap-3">
              <Tooltip title={authUser?.user?.userName || "User"}>
                <Avatar 
                  className="cursor-pointer mt-1 ring-2 ring-gray-100 hover:ring-blue-200 transition-all"
                >
                  {authUser?.user?.userName?.[0].toUpperCase()}
                </Avatar>
              </Tooltip>
              
              <div className="flex-1 space-y-3">
                <Input.TextArea
                  className="flex-1 !bg-gray-50/50 hover:!bg-white focus:!bg-white transition-colors"
                  placeholder="Write a note..."
                  value={noteContent}
                  onChange={(e) => setNoteContent(e.target.value)}
                  autoSize={{ minRows: 2, maxRows: 6 }}
                  disabled={isRecording || isLoading}
                />

                {/* URL Input */}
                {showUrlInput && (
                  <div className="relative">
                    <div className="flex items-center gap-2">
                      <Input
                        prefix={<Link2 size={16} className="text-gray-400" />}
                        placeholder="Enter URL..."
                        value={url}
                        onChange={handleUrlChange}
                        status={urlError ? "error" : ""}
                        disabled={isRecording || isLoading}
                        className="!bg-gray-50/50 hover:!bg-white focus:!bg-white transition-colors"
                      />
                      <Tooltip title="Clear URL">
                        <Button
                          type="text"
                          icon={<X size={16} />}
                          onClick={handleClearUrl}
                          className="text-gray-400 hover:text-gray-600 hover:bg-gray-100"
                        />
                      </Tooltip>
                    </div>
                    {urlError && (
                      <span className="absolute -top-5 left-0 text-red-500 text-xs">
                        {urlError}
                      </span>
                    )}
                  </div>
                )}

                {/* Image Preview */}
                {image && (
                  <div className="flex items-center gap-2 p-2 bg-gray-50/50 rounded-md border border-gray-100">
                    <ImageIcon size={16} className="text-gray-400" />
                    <span className="text-sm text-gray-600 truncate flex-1">
                      {image.name}
                    </span>
                    <Tooltip title="Remove image">
                      <Button
                        type="text"
                        icon={<X size={16} />}
                        onClick={handleClearImage}
                        className="text-gray-400 hover:text-gray-600 hover:bg-gray-100"
                      />
                    </Tooltip>
                  </div>
                )}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex items-center justify-between pt-3 border-t border-gray-100">
              <div className="flex items-center gap-2">
                <input 
                  type="file" 
                  ref={fileInputRef} 
                  className="hidden" 
                  accept="image/*" 
                  onChange={handleImageUpload}
                />
                
                <Tooltip title="Add image">
                  <Button
                    type="text"
                    icon={<ImageIcon className="text-gray-600" size={20} />}
                    onClick={() => fileInputRef.current?.click()}
                    disabled={true}
                    className="hover:bg-gray-100"
                  />
                </Tooltip>

                <Tooltip title="Add URL">
                  <Button
                    type="text"
                    icon={<Link2 className="text-gray-600" size={20} />}
                    onClick={() => setShowUrlInput(true)}
                    disabled={isLoading || isRecording || showUrlInput}
                    className={`hover:bg-gray-100 ${isLoading ? "!cursor-not-allowed !bg-gray-50" : ""}`}
                  />
                </Tooltip>
              </div>

              <div className="flex items-center gap-3">
                <Button 
                  onClick={handleSave}
                  disabled={isRecording || isLoading || Boolean(urlError) || (!noteContent.trim() && !url.trim() && !image)}
                  className="hover:bg-gray-100 disabled:hover:bg-transparent"
                >
                  Save
                </Button>

                <Tooltip title={!('webkitSpeechRecognition' in window) ? 'Speech recognition not supported in your browser' : ''}>
                  <Button
                    type="primary"
                    icon={isTranscribing ? <Loader2 className="animate-spin" size={20} /> : <Mic size={20} />}
                    onClick={isRecording ? stopRecording : startRecording}
                    className={`
                      transition-all duration-300
                      ${isRecording 
                        ? "bg-red-500 hover:bg-red-600 animate-pulse" 
                        : "bg-blue-500 hover:bg-blue-600"
                      }
                    `}
                    disabled={!('webkitSpeechRecognition' in window)}
                  >
                    {isRecording ? `Recording ${recordingTime}s` : "Record"}
                  </Button>
                </Tooltip>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}